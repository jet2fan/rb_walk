#include "ros/ros.h"
#include "std_msgs/Float64.h"

class Control
{
public:
  Control(char *name, float angle);
  ~Control();
  void timerCallback(const ros::TimerEvent&);
private:
  int timing;
  float trg; //target angle
  ros::Publisher c_pub;
  ros::Subscriber p_sub;
  ros::Timer timer;
  ros::NodeHandle nh;
};

Control::Control(char *name, float angle)
{
//ros::NodeHandle n;
  c_pub = nh.advertise<std_msgs::Float64>(name, 1000);
  timer = nh.createTimer(ros::Duration(0.1), &Control::timerCallback, this);
  timing = 0;
  trg = angle;
}

Control::~Control()
{
// Nothing now.
}

void Control::timerCallback(const ros::TimerEvent&)
{
  std_msgs::Float64 pos;
// position
  pos.data = trg;
  c_pub.publish(pos);
// ros_Duration が 0.1 なので、0.1 * 30 秒ごとに往復する
  if(timing == 30){
    timing = 0;
    trg = -trg;
  }
  timing++;
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "joint_controller");
  Control Control1((char*)"/ri4/joint1_position_controller/command", M_PI/6.0);
  Control Control2((char*)"/ri4/joint2_position_controller/command", M_PI/6.0);
  Control Control3((char*)"/ri4/joint3_position_controller/command", M_PI);
  Control Controlx((char*)"/ri4/jointx_position_controller/command", M_PI);
  Control Controly((char*)"/ri4/jointy_position_controller/command", M_PI);
  ros::spin();
  return 0;
}
